<script lang="ts">
  import {
    Mark,
    Scales,
    Ticker,
    MarkRenderGroup,
    Attribute,
  } from "counterpoint-vis";
  import * as d3 from "d3";
  import ingredientsArray from "../ingredients_filtered.js";
  import { onMount } from "svelte";

  type FoodMark = {
    title: Attribute<string>;
    x: Attribute<number>;
    y: Attribute<number>;
    img: Attribute<HTMLImageElement>;
    ingredients: Attribute<string[]>;
    size: Attribute<number>;
  };

  let dataCSV: d3.DSVRowArray;
  let canvas: HTMLCanvasElement;
  let offscreenCanvas: HTMLCanvasElement;
  let ticker: Ticker;
  let foodSet: MarkRenderGroup<FoodMark>;
  let imageCache: Record<string, HTMLImageElement> = {};

  const preloadImages = (dataCSV: d3.DSVRowArray) => {
    dataCSV.forEach((d, i) => {
      const img = new Image();
      img.src =
        d.Image_Name === "#NAME?"
          ? "src/placeholder_images/no-image-found.jpg"
          : `src/datasets/Food Images/${d.Image_Name}.jpg`;
      imageCache[i] = img;
    });
  };

  const findIngredients = (id: number): string[] => {
    if (!dataCSV) return [];
    const ingredientsString = dataCSV[id]?.Ingredients ?? "";
    return d3.filter(ingredientsArray, (ing) =>
      ingredientsString.includes(ing)
    );
  };

  const createMark = (id: string): Mark<FoodMark> =>
    new Mark<FoodMark>(id, {
      x: { value: 10000 * Math.random() },
      y: { value: 10000 * Math.random() },
      img: { valueFn: () => imageCache[Number(id)] },
      ingredients: {
        valueFn: (mark) => {
          const ingArr = findIngredients(Number(id));
          mark.size = ingArr.length;
          return ingArr;
        },
      },
      size: { valueFn: (mark) => mark.size * 2 },
    });

  const setupCanvas = () => {
    canvas.width = canvas.offsetWidth * window.devicePixelRatio;
    canvas.height = canvas.offsetHeight * window.devicePixelRatio;
    offscreenCanvas = document.createElement("canvas");
    offscreenCanvas.width = canvas.width;
    offscreenCanvas.height = canvas.height;
    d3.select(canvas as Element).call(zoom);
    drawFoodView();
  };

  const drawFoodView = () => {
    if (!dataCSV || !canvas || !offscreenCanvas) return;

    const ctx = canvas.getContext("2d");
    const offscreenCtx = offscreenCanvas.getContext("2d");
    if (!ctx || !offscreenCtx) return;

    ctx.resetTransform();
    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
    ctx.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);
    offscreenCtx.resetTransform();
    offscreenCtx.scale(window.devicePixelRatio, window.devicePixelRatio);
    offscreenCtx.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);

    const transform = d3.zoomTransform(canvas);
    const visibleMarks = foodSet.filter((mark) => {
      const x = transform.applyX(mark.attr("x"));
      const y = transform.applyY(mark.attr("y"));
      const size = 20;
      return (
        x + size >= 0 &&
        y + size >= 0 &&
        x - size <= canvas.clientWidth &&
        y - size <= canvas.clientHeight
      );
    });

    visibleMarks.forEach((mark) => {
      const { x, y, img, size } = mark.get();
      const transformedX = transform.applyX(x);
      const transformedY = transform.applyY(y);
      if (img.src && img.complete) {
        offscreenCtx.save();
        offscreenCtx.beginPath();
        offscreenCtx.arc(
          transformedX + size,
          transformedY + size,
          size,
          0,
          Math.PI * 2,
          true
        );
        offscreenCtx.closePath();
        offscreenCtx.clip();
        offscreenCtx.drawImage(
          img,
          transformedX,
          transformedY,
          size * 2,
          size * 2
        );
        offscreenCtx.restore();

        ctx.drawImage(offscreenCanvas, 0, 0);
      }
    });
  };

  const createAxes = () => {
    const svg = d3.select("#axes");
    const marginTop = 60,
      marginRight = 60,
      marginBottom = 60,
      marginLeft = 60;
    const width = window.innerWidth,
      height = window.innerHeight;

    const xScale = d3
      .scaleLinear()
      .domain(scales.xScale.range())
      .range([0, width - marginLeft - marginRight]);

    const yScale = d3
      .scaleLinear()
      .domain(scales.yScale.range())
      .range([height - marginTop - marginBottom, 0]);

    svg.attr("width", width).attr("height", height);
    svg.selectAll("*").remove();

    svg
      .append("g")
      .style("font-size", "10pt")
      .attr("transform", `translate(${marginLeft},${height - marginBottom})`)
      .call(d3.axisBottom(xScale).tickArguments([5, ",.6~s"]))
      .call((g) =>
        g
          .append("text")
          .attr("x", width - marginRight - marginLeft)
          .attr("y", 40)
          .attr("fill", "currentColor")
          .attr("text-anchor", "end")
          .text(`bottom axis →`)
      );

    svg
      .append("g")
      .style("font-size", "10pt")
      .attr("transform", `translate(${marginLeft},${marginTop})`)
      .call(d3.axisLeft(yScale).tickArguments([5, ",.6~s"]))
      .call((g) =>
        g
          .append("text")
          .attr("x", -marginLeft)
          .attr("dy", "-2em")
          .attr("fill", "currentColor")
          .attr("text-anchor", "end")
          .text(`↑ y axis`)
      );
  };

  const createMarkSet = (): Mark<FoodMark>[] =>
    dataCSV ? dataCSV.map((point) => createMark(point[""])) : [];

  onMount(async () => {
    dataCSV = await d3.csv("src/datasets/food_data.csv");
    preloadImages(dataCSV);

    foodSet = new MarkRenderGroup(createMarkSet());
    foodSet.configure({ animationDuration: 500 });

    setupCanvas();
  });

  $: {
    ticker = new Ticker([foodSet, scales]).onChange(() => {
      requestAnimationFrame(drawFoodView);
    });
  }

  $: {
    requestAnimationFrame(drawFoodView);
    createAxes();
    canvas;
  }

  $: if (canvas && foodSet) {
    d3.select(canvas as Element).call(zoom);
    requestAnimationFrame(drawFoodView);
  }

  let scales = new Scales({ animationDuration: 500 })
    .xRange([0, 500])
    .yRange([0, 500])
    .onUpdate(() => {
      const currentT = d3.zoomTransform(canvas);
      const t = scales.transform();
      if (t.k !== currentT.k || t.x !== currentT.x || t.y !== currentT.y) {
        d3.select(canvas as Element).call(
          zoom.transform,
          new d3.ZoomTransform(t.k, t.x, t.y)
        );
      }
    });

  const zoom = d3
    .zoom()
    .scaleExtent([0.1, 10])
    .on("zoom", (e) => {
      if (e.sourceEvent) {
        scales.transform(e.transform);
        drawFoodView();
      }
    });
</script>

<main>
  <div id="visualization-box">
    <svg id="axes" style="position: absolute; left: 20%; width: 70%;"></svg>
    <canvas
      bind:this={canvas}
      style="position: absolute; bottom: 5%; left: 30%; width: 60%; height: 95%;"
    ></canvas>
  </div>
</main>

<style>
  main {
    text-align: center;
    padding: 1em;
    max-width: 240px;
    margin: 0 auto;
  }
</style>
