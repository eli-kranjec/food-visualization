import Color from 'colorjs.io';
export type AnimationCurve = (t: number) => number;
export declare function curveLinear(t: number): number;
export declare function curveEaseInOut(t: number): number;
/**
 * A type representing an interpolator that can be called with two arguments, the
 * initial value of the interpolation and the interpolant (a number ranging from
 * 0 to 1). The function returns a value of the same type as the initial value
 * representing the interpolated value.
 */
export interface Interpolator<T> {
    interpolate: (initialValue: T, interpolant: number) => T;
}
/**
 * A type representing an interpolator that has a definite final value.
 */
export interface DeterminateInterpolator<T> extends Interpolator<T> {
    finalValue: T;
}
export type MixingFunction<T> = (v1: T, p1: number, v2: T, p2: number) => T;
export declare function numericalMixingFunction<T>(v1: T, p1: number, v2: T, p2: number): T;
export declare function colorMixingFunction(v1: Color, p1: number, v2: Color, p2: number): string;
export declare function numericalArrayMixingFunction<T>(v1: T, p1: number, v2: T, p2: number): T;
export declare function autoMixingFunction<T>(finalValue: T): (v1: T, p1: number, v2: T, p2: number) => T;
/**
 * A simple interpolator that applies a mixing function to interpolate between
 * an initial value and the given final value.
 * @param finalValue The destination value of the interpolation.
 * @param mixingFunction A function that takes a pair of values of the
 *  interpolating data type and proportions of each one, and returns a mixed
 *  value. The default is a linear interpolation and assumes the inputs are numbers.
 * @returns A determinate interpolator that can be called to execute the interpolation.
 */
export declare function interpolateTo<T>(finalValue: T, mixingFunction?: MixingFunction<T> | undefined): DeterminateInterpolator<T>;
/**
 * Interpolator that interpolates to a potentially changing final value.
 *
 * @param finalValueFn A function that takes no arguments and returns the final
 *  value. This is called every time the interpolator is evaluated.
 * @param mixingFunction A function that takes a pair of values of the
 *  interpolating data type and proportions of each one, and returns a mixed
 *  value. The default is a linear interpolation and assumes the inputs are numbers.
 * @returns An interpolator that can be called to execute the interpolation.
 */
export declare function interpolateToFunction<T>(finalValueFn: () => T, mixingFunction?: MixingFunction<T> | undefined): Interpolator<T>;
/**
 * Interpolator that interpolates along a sequence of values keyframe-style,
 * with each value in the sequence taking up an equal amount of "width" in the
 * interpolator.
 *
 * @param path A sequence of values that will be interpolated between. For a path
 *  with n values numbered 1 through n, each value x_i will be hit at t = i / n.
 * @param mixingFunction A function that takes a pair of values of the
 *  interpolating data type and proportions of each one, and returns a mixed
 *  value. The default is a linear interpolation and assumes the inputs are numbers.
 * @returns An interpolator that can be called to execute the interpolation.
 */
export declare function interpolateAlongPath<T>(path: T[], mixingFunction?: MixingFunction<T> | undefined): Interpolator<T>;
/**
 * A type that represents an interpolation to a potentially variable final value
 * using an animation curve.
 */
export declare class Animator<T> {
    duration: number;
    finalValue: T | undefined;
    interpolator: Interpolator<T>;
    curve: AnimationCurve;
    constructor(interpolator: Interpolator<T>, duration?: number, curve?: AnimationCurve);
    evaluate(initialValue: T, dt: number): T;
    withDelay(delay: number): Animator<T>;
}
/**
 * Shorthand for a basic interpolating animation with a given duration and
 * easing function.
 *
 * @param finalValue The final value to animate to
 * @param duration The duration of the animation in milliseconds
 * @param curve The animation curve or easing function (default is linear)
 * @returns An `{@link Animator}` object representing the animation
 */
export declare function basicAnimationTo<T>(finalValue: T, duration?: number, curve?: AnimationCurve): Animator<T>;
