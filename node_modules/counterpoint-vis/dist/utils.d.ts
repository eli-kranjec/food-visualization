export declare function approxEquals(obj1: any, obj2: any): boolean;
export type TimeProvider = (() => number) & {
    advance: (dt: number) => void;
};
export declare function makeTimeProvider(): TimeProvider;
/**
 * Enumerates all methods of an object.
 * @param obj the object to inspect
 * @returns a `Set` containing all methods that can be called on the object
 */
export declare function getAllMethodNames(obj: any): Set<string | symbol>;
/**
 * A utility to create "deferred" actions such as callbacks, allowing for
 * async/await syntax.
 *
 * source: https://stackoverflow.com/a/34637436/2152503
 */
export declare class Deferred<T> {
    promise: Promise<T>;
    info: any;
    resolve: (value: T | PromiseLike<T>) => void;
    reject: (reason: any) => void;
    constructor(info?: any);
}
/**
 * Pads a value range outward.
 *
 * @param extent The minimum and maximum of the value range to pad
 * @param padding The amount to pad outward in both directions, or an array of
 *  amounts to specify left and right separately
 * @returns The new padded value range
 */
export declare function padExtent(extent: [number, number], padding: number | [number, number]): [number, number];
/**
 * Computes the bounding box over a set of coordinates.
 *
 * @param points Set of points to compute the bounding box over
 * @returns Bounds in the x and y directions
 */
export declare function boundingBox(points: {
    x: number;
    y: number;
}[]): {
    x: [number, number];
    y: [number, number];
};
